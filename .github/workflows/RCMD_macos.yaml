on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest, r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up R environment
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - name: Set up Pandoc
        uses: r-lib/actions/setup-pandoc@v2

      # Install system dependencies on Linux
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libssl-dev libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev

      # Install R dependencies
      - name: Install R dependencies
        run: |
          install.packages(c("remotes", "glmnet"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}

      # Verify glmnet installation
      - name: Verify glmnet Installation
        run: |
          if (!requireNamespace("glmnet", quietly = TRUE)) {
            stop("glmnet is not installed")
          } else {
            message("glmnet is installed successfully")
          }
        shell: Rscript {0}

      # Run R CMD check
      - name: R CMD Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--no-build-vignettes", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # Display testthat output for debugging
      - name: Display Testthat Output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash