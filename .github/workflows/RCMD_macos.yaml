on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest, r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      OMP_NUM_THREADS: 1  # Limit parallel processing to 1 core

    steps:
      - uses: actions/checkout@v3

      # Clear R package cache explicitly
      - name: Clear R package cache
        run: rm -rf ${{ env.R_LIBS_USER }}

      # Set up R environment
      - uses: r-lib/actions/setup-r@v2-branch
        with:
          r-version: ${{ matrix.config.r }}

      # Install system dependencies for Linux
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libomp-dev libharfbuzz-dev libfribidi-dev

      # Install system dependencies for macOS
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install libomp

      # Install R dependencies including glmnet
      - name: Install R dependencies
        run: |
          install.packages(c("remotes", "glmnet"))
          remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      # Install and test "text" package
      - name: Install and test "text" package
        run: |
          install.packages("devtools")
          devtools::install_github("oscarkjell/text")
          text::textrpp_install(prompt = FALSE)
          text::textrpp_initialize(textEmbed_test = TRUE)
        shell: Rscript {0}

      # Run R CMD check
      - name: R CMD check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      # Session info for debugging
      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      # Upload coverage to Codecov
      - name: Test coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: covr::codecov(token = Sys.getenv("CODECOV_TOKEN"))
        shell: Rscript {0}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.config.os }}
          verbose: true